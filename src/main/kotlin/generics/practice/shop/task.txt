ЗАДАНИЕ: Система управления интернет-магазином с использованием дженериков

ОПИСАНИЕ:
Создать систему для управления товарами в интернет-магазине, используя принципы ООП и дженерики в Kotlin.

ТРЕБОВАНИЯ:

1. БАЗОВЫЕ КЛАССЫ И СТРУКТУРЫ:
   - Создать абстрактный класс Product с полями:
     * id: Int - уникальный идентификатор товара
     * name: String - название товара
     * price: Double - цена товара
     * Метод displayInfo() для вывода информации о товаре

   - Создать data class Customer с полями:
     * id: Int - идентификатор покупателя
     * name: String - имя покупателя  
     * email: String - электронная почта
     * Метод printInfo() для вывода информации о покупателе

2. ТИПЫ ТОВАРОВ:
   Реализовать несколько конкретных классов товаров, наследующих Product:
   
   - Electronics (Электроника):
     * Дополнительное поле: warrantyMonths: Int (гарантия в месяцах)
     * Метод repair() - ремонт товара
     * Реализует интерфейсы: Seasonable, Tradable
   
   - Books (Книги):
     * Дополнительное поле: author: String (автор)
     * Метод read() - чтение книги
     * Реализует интерфейсы: Complectable, Studentable
   
   - Clothes (Одежда):
     * Дополнительное поле: size: Int (размер)
     * Метод wash() - стирка одежды
     * Реализует интерфейсы: Saleable, Programmable

3. ИНТЕРФЕЙСЫ ДЛЯ СКИДОК:
   Создать интерфейсы для различных типов скидок:
   
   - Saleable - для товаров со скидкой распродажи
     * Метод: saleDiscount(): Double
   
   - Seasonable - для сезонных скидок
     * Метод: seasonDiscount(discount: Int): Double
   
   - Tradable - для обмена старого на новое
     * Метод: tradeIn()
   
   - Complectable - для скидок на комплект
     * Метод: complectDiscount()
   
   - Studentable - для студенческих скидок
     * Метод: studentDiscount(): Double
   
   - Programmable - для скидок программистам
     * Метод: programDiscount(): Double

4. КОРЗИНА С ДЖЕНЕРИКАМИ:
   Создать класс Cart<T : Product> с функционалом:
   - Поле items: MutableList<T> для хранения товаров
   - Метод add(item: T) - добавление товара в корзину
   - Метод showItems(): List<T> - показать все товары с информацией
   - Метод getTotalPrice(): Double - получить общую стоимость
   - Метод showExpensive(): T? - найти самый дорогой товар

5. ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ:
   - applySaleToAll(products: List<Saleable>) - применить скидку распродажи ко всем товарам
   - applyTradeInToAll(products: List<Tradable>) - применить trade-in ко всем товарам
   - processCart<T>(cart: Cart<T>) - обработка корзины (дженерик функция)

6. ДЕМОНСТРАЦИЯ:
   В функции main() продемонстрировать:
   - Создание нескольких покупателей
   - Создание товаров разных типов
   - Использование специфичных методов товаров (repair, read, wash)
   - Работу с корзиной
   - Применение различных скидок

ЦЕЛЬ ЗАДАНИЯ:
- Практика работы с дженериками в Kotlin
- Понимание ограничений типов (type constraints)
- Использование интерфейсов для полиморфизма
- Работа с коллекциями и дженерик-функциями
- Применение принципов ООП в реальной задаче